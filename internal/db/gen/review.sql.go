// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: review.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (user_id, book_id, rating, comment)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, book_id, rating, comment, created_at, updated_at
`

type CreateReviewParams struct {
	UserID  pgtype.UUID
	BookID  pgtype.UUID
	Rating  pgtype.Int4
	Comment pgtype.Text
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.UserID,
		arg.BookID,
		arg.Rating,
		arg.Comment,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteReview, id)
	return err
}

const getReviewByID = `-- name: GetReviewByID :one
SELECT id, user_id, book_id, rating, comment, created_at, updated_at
FROM reviews
WHERE id = $1
`

func (q *Queries) GetReviewByID(ctx context.Context, id pgtype.UUID) (Review, error) {
	row := q.db.QueryRow(ctx, getReviewByID, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReviewsByBook = `-- name: GetReviewsByBook :many
SELECT id, user_id, book_id, rating, comment, created_at, updated_at
FROM reviews
WHERE book_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetReviewsByBook(ctx context.Context, bookID pgtype.UUID) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsByBook, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReviewByID = `-- name: UpdateReviewByID :one
UPDATE reviews
SET
  rating = COALESCE($2, rating),
  comment = COALESCE($3, comment)
WHERE id = $1
RETURNING id, user_id, book_id, rating, comment, created_at, updated_at
`

type UpdateReviewByIDParams struct {
	ID      pgtype.UUID
	Rating  pgtype.Int4
	Comment pgtype.Text
}

func (q *Queries) UpdateReviewByID(ctx context.Context, arg UpdateReviewByIDParams) (Review, error) {
	row := q.db.QueryRow(ctx, updateReviewByID, arg.ID, arg.Rating, arg.Comment)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
