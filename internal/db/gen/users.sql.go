// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, email, password_hash, phone_number, token_version)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, first_name, email, password_hash, role, created_at, updated_at, last_name, phone_number, token_version, bio
`

type CreateUserParams struct {
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
	PhoneNumber  pgtype.Text
	TokenVersion int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.PhoneNumber,
		arg.TokenVersion,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastName,
		&i.PhoneNumber,
		&i.TokenVersion,
		&i.Bio,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many

SELECT id, first_name, email, password_hash, role, created_at, updated_at, last_name, phone_number, token_version, bio FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.Email,
			&i.PasswordHash,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastName,
			&i.PhoneNumber,
			&i.TokenVersion,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, email, password_hash, role, created_at, updated_at, last_name, phone_number, token_version, bio FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastName,
		&i.PhoneNumber,
		&i.TokenVersion,
		&i.Bio,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, email, password_hash, role, created_at, updated_at, last_name, phone_number, token_version, bio FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastName,
		&i.PhoneNumber,
		&i.TokenVersion,
		&i.Bio,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET
  first_name   = COALESCE($2, first_name),
  last_name    = COALESCE($3, last_name),
  phone_number = COALESCE($4, phone_number),
  bio          = COALESCE($5, bio)
WHERE id = $1
RETURNING id, first_name, email, password_hash, role, created_at, updated_at, last_name, phone_number, token_version, bio
`

type UpdateUserByIDParams struct {
	ID          pgtype.UUID
	FirstName   string
	LastName    string
	PhoneNumber pgtype.Text
	Bio         string
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByID,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastName,
		&i.PhoneNumber,
		&i.TokenVersion,
		&i.Bio,
	)
	return i, err
}
